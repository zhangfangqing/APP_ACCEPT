// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Caller.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.nci.tkb.Caller.handler;

public abstract class _CallHandlerDisp extends Ice.ObjectImpl implements CallHandler
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Caller::handler::CallHandler",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final java.util.Map<java.lang.String, byte[]> asynCall(java.util.Map<java.lang.String, byte[]> pm)
    {
        return asynCall(pm, null);
    }

    public final java.util.Map<java.lang.String, java.lang.String> asynCallAdd(java.util.Map<java.lang.String, java.lang.String> pm)
    {
        return asynCallAdd(pm, null);
    }

    public final void getResult1(java.util.Map<java.lang.String, byte[]> pm, com.nci.tkb.Caller.paramMapHolder rt)
    {
        getResult1(pm, rt, null);
    }

    public final java.util.Map<java.lang.String, byte[]> getResult2(java.util.Map<java.lang.String, byte[]> pm)
    {
        return getResult2(pm, null);
    }

    public final void shutdown()
    {
        shutdown(null);
    }

    public static Ice.DispatchStatus ___getResult1(CallHandler __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.util.Map<java.lang.String, byte[]> pm;
        pm = com.nci.tkb.Caller.paramMapHelper.read(__is);
        __inS.endReadParams();
        com.nci.tkb.Caller.paramMapHolder rt = new com.nci.tkb.Caller.paramMapHolder();
        __obj.getResult1(pm, rt, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        com.nci.tkb.Caller.paramMapHelper.write(__os, rt.value);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getResult2(CallHandler __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.util.Map<java.lang.String, byte[]> pm;
        pm = com.nci.tkb.Caller.paramMapHelper.read(__is);
        __inS.endReadParams();
        java.util.Map<java.lang.String, byte[]> __ret = __obj.getResult2(pm, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        com.nci.tkb.Caller.paramMapHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___asynCall(CallHandler __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.util.Map<java.lang.String, byte[]> pm;
        pm = com.nci.tkb.Caller.paramMapHelper.read(__is);
        __inS.endReadParams();
        java.util.Map<java.lang.String, byte[]> __ret = __obj.asynCall(pm, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        com.nci.tkb.Caller.paramMapHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___asynCallAdd(CallHandler __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.util.Map<java.lang.String, java.lang.String> pm;
        pm = com.nci.tkb.Caller.paramMapsHelper.read(__is);
        __inS.endReadParams();
        java.util.Map<java.lang.String, java.lang.String> __ret = __obj.asynCallAdd(pm, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        com.nci.tkb.Caller.paramMapsHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___shutdown(CallHandler __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.shutdown(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "asynCall",
        "asynCallAdd",
        "getResult1",
        "getResult2",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "shutdown"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___asynCall(this, in, __current);
            }
            case 1:
            {
                return ___asynCallAdd(this, in, __current);
            }
            case 2:
            {
                return ___getResult1(this, in, __current);
            }
            case 3:
            {
                return ___getResult2(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___shutdown(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
